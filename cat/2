local skynet = require "skynet"
local mysql = require "mysql"
local redis = require "redis"

local cache 
local x = 1
local db
		
local	
function get_from_redis()
	local result = {}
	local resultset_id = md5( strsql ) --待定 
	local redis_row_set_key = "resultset" .. ":" .. resultset_id
	local mysqldb
	local mysqlres

	local redisdb = redis.connect( redisconf )
	assert( redisdb == nil )
		
	local redisres = redis:smembers( redis_row_set_key )
	if nil == redisres then
		redis.disconnect()

		mysqldb = mysql.connect( mysqlconf )
		assert( nil == mysqldb )
		
		mysqlres = mysqldb:query( strsql )
		redis_row_set_key = mysql2redis( mysqlres , resultset_id )

		redisdb = redis.connect( redisconf )
		assert( nil == redisdb )

		redisres = redisdb:smembers( redis_row_set_key )
	end
	-- TODO
end






















local
function connect_mysql( ... )
	local function on_connect( db )
		db:query( "set charset utf8" )
	end
	
	local db = mysql.connect( { 
		host = 192.168.1.116
		port = 3306
		database = "test"
		user = "root"
		password = "yulei"

		max_packet_size = 1024 * 1024
		on_connect = on_connect
	} )

	return db
end

local
function disconnect_mysql( db )
	db:disconnect()
end

local
function conf = 
{
	host = 192.168.1.116
	port = 6379
	db = 0
}

local
function watching()
	local w = redis.watch( conf )
	w:subscribe "foo"
	w:psubscribe "hello.*"
	
	while true do
		print( "watch" , w:message() )
	end
end

local
function connect_redis( ... )
	skynet.fork( watching )
	local db = redis.connect( conf )
	
	return db
end

local
function disconnect_redis( cache )
	cache:disconnect()
end



local CMD = {}

function CMD:disconnect_redis( ... )
	disconnect_redis( cache )
end

function CMD:command( ... )
	local key = tostring( ... )
	return cache:get( key )
end

function CMD:disconnect_mysql( ... )
	disconnect_mysql( db )
end


skynet.start( function () 
	skynet.dispatch( "lua" , function( _, _, cmd, ... )
		local f = assert( CMD[ cmd ] )
		skynet.ret( skynet.pack( f( ... ) ) )
	end
		)

		db = connect_mysql()
		cache = connect_redis()
	end
	)
