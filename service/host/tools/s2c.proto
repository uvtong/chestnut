syntax = "proto2";

package s2c;

// 0
message package {
	enum Type {    
    	REQUEST         = 0;
    	RESPONSE        = 1;
    };
	required int32 tag = 1;
	required Type type = 2;
	required int32 session = 3;
}

// 1
message enter_room_req {
	enum Type {
		RIGHT          = 1;
		LEFT           = 0;
	};
	required Type type = 1;
	required int32 user_id = 2;
	required string name = 3;
}

// 2
message enter_room_rsp {
	required int32 errorcode = 1;
	required string msg = 2;
}

// 3
message ready_req {
	required int32 errorcode = 1;
	required int32 user_id = 2;
	required int32 ready = 3;
	repeated int32 mcards = 4;
	repeated int32 rcards = 5;
	repeated int32 lcards = 6;
	repeated int32 dcards = 7;
	optional int32 your_turn = 8;
	optional int32 countdown = 9;
}

// 4
message ready_rsp {
	required int32 errorcode = 1;
	required string msg = 2;
}

// 5
message mp_req {
	required int32 user_id = 1;
	required int32 user_id_ = 2;
	required int32 m = 3;
	repeated int32 mcards = 4;
	repeated int32 rcards = 5;
	repeated int32 lcards = 6;
	repeated int32 dcards = 7;
}

// 6 
message mp_rsp {
	required int32 errorcode = 1;
	required string msg = 2;
}

// 7
message deal_cards_req {
	required int32 errorcode = 1;
	required string msg = 2;
	optional int32 your_turn = 3;
	optional int32 countdown = 4;
}

// 8
message deal_cards_rsp {
	required int32 errorcode = 1;
	required string msg = 2;	
}

// 9
message rob_req {
	// 1.rob 2.turn 3. lead
	required int32 errorcode = 1;
	required int32 user_id = 2;
	required int32 m = 3;
	required int32 your_turn = 4;
	required int32 countdown = 5;
}

// 10
message rob_rsp {
	required int32 errorcode = 1;
	required string msg = 2;
}

// 11
message turn_rob_req {
	// waste
}

// 12
message turn_rob_rsp {
	// waste
}

// 13
message mark_req {
	required int32 user_id = 1;
}

// 14
message mark_rsp {
	required int32 errorcode = 1;
	required string msg = 2;
}

// 1. lead 2. turn_lead 3. result
message settlement {
	required int32 gold = 1;	
}

// 15
message lead_req {
	required int32 errorcode = 1;
	required int32 user_id = 2;
	repeated int32 cards = 3;
	required int32 your_turn = 4;
	required int32 countdown = 5;
	optional settlement me = 6;
	optional settlement right = 7;
	optional settlement left = 8;
}

// 16
message resp_lead {
	required int32 errorcode = 1;
	required string msg = 2;
}

// 17
message req_turn_lead {
	// waste
}

// 18
message resp_turn_lead {
	// waste
}

// 19
message am_req {
	required int32 user_id = 1;
	required int32 m = 2;
}

// 20 
message am_rsp {
	required int32 errorcode = 1;
	required string msg = 2;
}